<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zxpsuper.github.io</id>
    <title>小皮咖</title>
    <updated>2019-08-09T08:16:03.896Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zxpsuper.github.io"/>
    <link rel="self" href="https://zxpsuper.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://zxpsuper.github.io/images/avatar.png</logo>
    <icon>https://zxpsuper.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 小皮咖</rights>
    <entry>
        <title type="html"><![CDATA[浏览器 Event Loop 机制]]></title>
        <id>https://zxpsuper.github.io/post/event-loop</id>
        <link href="https://zxpsuper.github.io/post/event-loop">
        </link>
        <updated>2019-08-09T03:44:21.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="1-event-loop是什么">1. Event Loop是什么</h2>
<p>event loop是一个执行模型，在不同的地方有不同的实现。浏览器和NodeJS基于不同的技术实现了各自的Event Loop。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="1-event-loop是什么">1. Event Loop是什么</h2>
<p>event loop是一个执行模型，在不同的地方有不同的实现。浏览器和NodeJS基于不同的技术实现了各自的Event Loop。</p>
<!-- more -->
<h2 id="2-宏队列和微队列">2. 宏队列和微队列</h2>
<p><strong>宏队列，macrotask，也叫tasks。</strong> 一些异步任务的回调会依次进入macro task queue，等待后续被调用，这些异步任务包括：</p>
<ul>
<li>setTimeout</li>
<li>setInterval</li>
<li>setImmediate (Node独有)</li>
<li>requestAnimationFrame (浏览器独有)</li>
<li>I/O</li>
<li>UI rendering (浏览器独有)</li>
</ul>
<p><strong>微队列，microtask，也叫jobs。</strong> 另一些异步任务的回调会依次进入micro task queue，等待后续被调用，这些异步任务包括：</p>
<ul>
<li>process.nextTick (Node独有)</li>
<li>Promise</li>
<li>Object.observe</li>
<li>MutationObserver</li>
</ul>
<h2 id="3-实例介绍">3. 实例介绍</h2>
<p>执行顺序，先微队列，后宏队列。</p>
<p>看下面一个例子：</p>
<pre><code class="language-js">console.log(1);
setTimeout(() =&gt; {
  console.log(2);
  setTimeout(() =&gt; {
    console.log(8);
  })
  Promise.resolve().then(() =&gt; {
    console.log(3)
  });
});
new Promise((resolve, reject) =&gt; {
  console.log(4)
  setTimeout(() =&gt; {
    console.log(10);
  })
  resolve()
}).then(() =&gt; {
  console.log(5);
  Promise.resolve().then(() =&gt; {
    console.log(11)
  });
  setTimeout(() =&gt; {
    console.log(13);
  })
})
setTimeout(() =&gt; {
  Promise.resolve().then(() =&gt; {
    console.log(9)
  });
  console.log(6);
  setTimeout(() =&gt; {
    console.log(12);
  })
})
console.log(7);
</code></pre>
<p>从头至尾执行一次代码,根据上面分类规则分至不同队列, new promise( function )也是立即执行。setTimeout 的回调函数属于宏队列（macrotask），resolve 的回调函数属于微队列</p>
<pre><code class="language-js">// 栈区（stack）
console.log(1);
console.log(4);
console.log(7);
</code></pre>
<pre><code class="language-js">// 宏队列
() =&gt; {
  console.log(2);
  setTimeout(() =&gt; {
    console.log(8);
  })
  Promise.resolve().then(() =&gt; {
    console.log(3)
  });
}
() =&gt; {
  console.log(10);
}
() =&gt; {
  Promise.resolve().then(() =&gt; {
    console.log(9)
  });
  console.log(6);
  setTimeout(() =&gt; {
    console.log(12);
  })
}
</code></pre>
<pre><code class="language-js">// 微队列
() =&gt; {
  console.log(5);
  Promise.resolve().then(() =&gt; {
    console.log(11)
  });
  setTimeout(() =&gt; {
    console.log(13);
  })
}
</code></pre>
<p>优先执行微队列，微队列执行过程中产生的微队列和宏队列置于队列末尾排序执行，而宏队列产生的微队列和宏队列于新的队列中等待。。</p>
<p>执行微队列：（分类）</p>
<pre><code class="language-js">// 栈区（stack）
console.log(1);
console.log(4);
console.log(7);
//////////
console.log(5);
</code></pre>
<pre><code class="language-js">// 微队列
() =&gt; {
  console.log(11)
});
</code></pre>
<pre><code class="language-js">// 宏队列
() =&gt; {
  console.log(2);
  setTimeout(() =&gt; {
    console.log(8);
  })
  Promise.resolve().then(() =&gt; {
    console.log(3)
  });
}
() =&gt; {
  console.log(10);
}
() =&gt; {
  Promise.resolve().then(() =&gt; {
    console.log(9)
  });
  console.log(6);
  setTimeout(() =&gt; {
    console.log(12);
  })
}
() =&gt; {
    console.log(13);
}
</code></pre>
<p>此时新增了一个微队列<code>console.log(11)</code>,因为是微队列产生的，继续执行：</p>
<pre><code class="language-js">// 栈区（stack）
console.log(1);
console.log(4);
console.log(7);
//////////
console.log(5);
/////////
console.log(11)
</code></pre>
<pre><code class="language-js">// 微队列-空
</code></pre>
<pre><code class="language-js">// 宏队列
() =&gt; {
  console.log(2);
  setTimeout(() =&gt; {
    console.log(8);
  })
  Promise.resolve().then(() =&gt; {
    console.log(3)
  });
}
() =&gt; {
  console.log(10);
}
() =&gt; {
  Promise.resolve().then(() =&gt; {
    console.log(9)
  });
  console.log(6);
  setTimeout(() =&gt; {
    console.log(12);
  })
}
() =&gt; {
    console.log(13);
}
</code></pre>
<p>执行完微队列后执行宏队列：</p>
<pre><code class="language-js">// 栈区（stack）
console.log(1);
console.log(4);
console.log(7);
//////////
console.log(5);
/////////
console.log(11);
/////////
console.log(2);
console.log(10);
console.log(6);
console.log(13);
</code></pre>
<pre><code class="language-js">// 微队列
() =&gt; {
  console.log(3)
}
() =&gt; {
  console.log(9)
}
</code></pre>
<pre><code class="language-js">// 宏队列
() =&gt; {
  console.log(8);
}
() =&gt; {
  console.log(12);
}
</code></pre>
<p>接下来执行微队列后宏队列，即：</p>
<pre><code class="language-js">// 栈区（stack）
console.log(1);
console.log(4);
console.log(7);
//////////
console.log(5);
/////////
console.log(11);
/////////
console.log(2);
console.log(10);
console.log(6);
console.log(13);
////////
console.log(3)
console.log(9)
////////
console.log(8);
console.log(12);
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://zxpsuper.github.io/post/hello-gridea</id>
        <link href="https://zxpsuper.github.io/post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>